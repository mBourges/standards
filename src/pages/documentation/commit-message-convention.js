import React from "react";
import Layout from "../../components/layout";
import CodeBlock from "../../components/codeBlock";

export default () => (<Layout>
  <h1 className="title is-1">Commit Message Conventions</h1>
  <p>These rules are adopted from the AngularJS commit conventions.</p>
  <h2 className="title is-2">Goals</h2>
  <ul>
    <li>provide better information when browsing the history</li>
    allow generating CHANGELOG.md by script
  </ul>
  <p>We use these three sections in changelog: new features, bug fixes, breaking changes.
    This list could be generated by script when doing arelease. Along with links to related commits.
    Of course you can edit this change log before actual release, but it could generate the skeleton.
    List of all subjects (first lines in commit message) since last release:
  </p>
  <CodeBlock language="shell">
{`git log <last tag> HEAD --pretty=format:%s
# New features in this release`}
  </CodeBlock>

  <CodeBlock language="shell">
    {`git log <last release> HEAD --grep feature`}
  </CodeBlock>

  <h2 className="title is-2">Format of the commit message</h2>
  <p>Any line of the commit message cannot be longer 100 characters!</p>
  <p>This allows the message to be easier to read on github as well as in various git tools.</p>
  <CodeBlock language="markup">
{`<type>(<scope>): <subject>
<BLANK LINE>
<body>
<BLANK LINE>
<footer>`}
  </CodeBlock>

  <div className="content has-text-weight-bold">Subject line</div>
  <p>Subject line contains succinct description of the change.</p>
  <p>Allowed &lt;type&gt;</p>
  <ul>
    <li>feat (feature)</li>
    <li>fix (bug fix)</li>
    <li>docs (documentation)</li>
    <li>style (formatting, missing semi colons, ...)</li>
    <li>refactor</li>
    <li>test (when adding missing tests)</li>
    <li>chore (maintain)</li>
  </ul>
  <p>Allowed &lt;scope&gt;</p>
  <p>Scope could be anything specifying place of the commit change.</p>
  <p>&lt;subject&gt; text</p>
  <ul>
    <li>use imperative, present tense: “change” not “changed” nor “changes”</li>
    <li>don't capitalize first letter</li>
    <li>no dot (.) at the end</li>
  </ul>
  <div className="content has-text-weight-bold">Message body</div>
  <p>just as in use imperative, present tense: “change” not “changed” nor “changes”</p>
  <p>includes motivation for the change and contrasts with previous behavior</p>
  <div className="content has-text-weight-bold">Message footer</div>
  <p>Breaking changes</p>
  <p>All breaking changes have to be mentioned in footer with the description of the change, justification and migration notes</p>
  <CodeBlock language="markup">
{`BREAKING CHANGE: isolate scope bindings definition has changed and
the inject option for the directive controller injection was
removed.`}
  </CodeBlock>
  <p>Referencing issues</p>
  <p>Closed issues (Jira ticket number) should be listed on a separate line in the footer prefixed with "Closes" keyword like this:</p>
  <CodeBlock language="markup">
    {`Closes SFDC-86`}
  </CodeBlock>
  <p>or in case of multiple issues:</p>
  <CodeBlock language="markup">
    {`Closes SFDC-123, SFDC-245, SFDC-992`}
  </CodeBlock>

  <h2 className="title is-2">Examples</h2>
  <CodeBlock language="markup">
{`feat($browser): onUrlChange event (popstate/hashchange/polling)

Added new event to $browser:
- forward popstate event if available
- forward hashchange event if popstate not available
- do polling when neither popstate nor hashchange available

BREAKING CHANGE: $browser.onHashChange, which was removed (use
onUrlChange instead)`}
  </CodeBlock>

  <CodeBlock language="markup">
{`fix($compile): couple of unit tests for IE9

Older IEs serialize html uppercased, but IE9 does not...
Would be better to expect case insensitive, unfortunately jasmine does
not allow to user regexps for throw expectations.

Closes #392
BREAKING CHANGE: foo.bar api, foo.baz should be used instead`}
  </CodeBlock>

  <CodeBlock language="markup">
{`feat(directive): ng:disabled, ng:checked, ng:multiple, ng:readonly, ng:selected

New directives for proper binding these attributes in older browsers
(IE).
Added coresponding description, live examples and e2e tests.

Closes #351`}
  </CodeBlock>

  <CodeBlock language="markup">
{`style($location): add couple of missing semi colons

docs(guide): updated fixed docs from Google Docs
Couple of typos fixed:
- indentation
- batchLogbatchLog -> batchLog
- start periodic checking
- missing brace`}
  </CodeBlock>
</Layout>);
